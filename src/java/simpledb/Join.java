package simpledb;

import java.util.*;

/**
 * The Join operator implements the relational join operation.
 */
public class Join extends Operator {

    private static final long serialVersionUID = 1L;

    private final JoinPredicate joinPredicate;
    private final OpIterator opIterator1;
    private final OpIterator opIterator2;
    private List<OpIterator> children = new ArrayList<>();
    private List<Tuple> joinedTuples = null;
    private TupleIterator joinedTuplesIterator = null;

    /**
     * Constructor. Accepts two children to join and the predicate to join them
     * on
     *
     * @param p      The predicate to use to join the children
     * @param child1 Iterator for the left(outer) relation to join
     * @param child2 Iterator for the right(inner) relation to join
     */
    public Join(final JoinPredicate p, final OpIterator child1, final OpIterator child2) {
        joinPredicate = p;
        opIterator1 = child1;
        opIterator2 = child2;
        children.add(child1);
        children.add(child2);
    }

    public JoinPredicate getJoinPredicate() {
        return joinPredicate;
    }

    /**
     * @return the field name of join field1. Should be quantified by
     * alias or table name.
     */
    public String getJoinField1Name() {
        return opIterator1.getTupleDesc().getFieldName(joinPredicate.getField1());
    }

    /**
     * @return the field name of join field2. Should be quantified by
     * alias or table name.
     */
    public String getJoinField2Name() {
        return opIterator2.getTupleDesc().getFieldName(joinPredicate.getField2());
    }

    /**
     * @see simpledb.TupleDesc#merge(TupleDesc, TupleDesc) for possible
     * implementation logic.
     */
    public TupleDesc getTupleDesc() {
        return TupleDesc.merge(opIterator1.getTupleDesc(), opIterator2.getTupleDesc());
    }

    public void open() throws DbException, NoSuchElementException,
            TransactionAbortedException {
        super.open();
        if (joinedTuples == null) {
            opIterator1.open();
            opIterator2.open();
            joinedTuples = new ArrayList<>();
            while (opIterator1.hasNext()) {
                final Tuple tuple1 = opIterator1.next();
                while (opIterator2.hasNext()) {
                    final Tuple tuple2 = opIterator2.next();
                    if (joinPredicate.filter(tuple1, tuple2)) {
                        final Tuple mergedTuple = new Tuple(getTupleDesc());
                        int index = 0;
                        final Iterator<Field> fields1 = tuple1.fields();
                        while (fields1.hasNext()) {
                            mergedTuple.setField(index, fields1.next());
                            index += 1;
                        }
                        final Iterator<Field> fields2 = tuple2.fields();
                        while (fields2.hasNext()) {
                            mergedTuple.setField(index, fields2.next());
                            index += 1;
                        }
                        joinedTuples.add(mergedTuple);
                    }
                }
                opIterator2.rewind();
            }
            opIterator1.close();
            opIterator2.close();
            joinedTuplesIterator = new TupleIterator(getTupleDesc(), joinedTuples);
        }
        joinedTuplesIterator.open();
    }

    public void close() {
        super.close();
        joinedTuplesIterator.close();
    }

    public void rewind() throws DbException, TransactionAbortedException {
        close();
        open();
    }

    /**
     * Returns the next tuple generated by the join, or null if there are no
     * more tuples. Logically, this is the next tuple in r1 cross r2 that
     * satisfies the join predicate. There are many possible implementations;
     * the simplest is a nested loops join.
     * <p>
     * Note that the tuples returned from this particular implementation of Join
     * are simply the concatenation of joining tuples from the left and right
     * relation. Therefore, if an equality predicate is used there will be two
     * copies of the join attribute in the results. (Removing such duplicate
     * columns can be done with an additional projection operator if needed.)
     * <p>
     * For example, if one tuple is {1,2,3} and the other tuple is {1,5,6},
     * joined on equality of the first column, then this returns {1,2,3,1,5,6}.
     *
     * @return The next matching tuple.
     * @see JoinPredicate#filter
     */
    protected Tuple fetchNext() throws TransactionAbortedException, DbException {
        if (joinedTuplesIterator.hasNext()) {
            return joinedTuplesIterator.next();
        } else {
            return null;
        }
    }

    @Override
    public OpIterator[] getChildren() {
        return children.toArray(OpIterator[]::new);
    }

    @Override
    public void setChildren(final OpIterator[] children) {
        this.children = (ArrayList<OpIterator>) Arrays.asList(children);
    }

}
